{"meta":{"title":"木木","subtitle":null,"description":"好少年光芒万丈","author":"木木","url":"https://5nptdz.coding-pages.com"},"pages":[{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-01-11T13:15:18.957Z","comments":false,"path":"about/index.html","permalink":"https://5nptdz.coding-pages.com/about/index.html","excerpt":"","text":"[さくら荘の木木] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2019-12-16T09:23:22.181Z","comments":false,"path":"bangumi/index.html","permalink":"https://5nptdz.coding-pages.com/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2019-12-16T16:05:00.170Z","comments":false,"path":"client/index.html","permalink":"https://5nptdz.coding-pages.com/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2019-12-16T15:48:11.540Z","comments":true,"path":"comment/index.html","permalink":"https://5nptdz.coding-pages.com/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2019-12-16T16:06:24.297Z","comments":false,"path":"donate/index.html","permalink":"https://5nptdz.coding-pages.com/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2019-12-16T16:07:19.049Z","comments":false,"path":"lab/index.html","permalink":"https://5nptdz.coding-pages.com/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-01-18T11:25:30.085Z","comments":true,"path":"links/index.html","permalink":"https://5nptdz.coding-pages.com/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-01-12T04:59:59.038Z","comments":false,"path":"music/index.html","permalink":"https://5nptdz.coding-pages.com/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2019-12-16T09:23:22.186Z","comments":true,"path":"rss/index.html","permalink":"https://5nptdz.coding-pages.com/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2019-12-16T09:23:22.187Z","comments":true,"path":"tags/index.html","permalink":"https://5nptdz.coding-pages.com/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2019-12-16T09:23:22.187Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://5nptdz.coding-pages.com/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2019-12-16T09:23:22.188Z","comments":false,"path":"video/index.html","permalink":"https://5nptdz.coding-pages.com/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"理解面向对象","slug":"Objent-oriented-Understand","date":"2020-01-09T14:16:01.000Z","updated":"2020-01-09T11:14:18.707Z","comments":true,"path":"2020/01/09/Objent-oriented-Understand/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/09/Objent-oriented-Understand/","excerpt":"","text":"概述面向过程和面向对象都是对软件分析、设计和开发的一种思想，它知道着人们以不同的方式去分析、设计和开发软件。 面向过程面向过程思想思考问题时，我们首先思考“怎么按步骤实现？”并将步骤对应成方法，一步一步，最终完成。 这个适合简单任务，不需要过多协作的情况下。比如，如何开车？ 点火 挂挡 踩油门 开车 面向过程适合简单、不需要协作的事务。 但是当我们思考比较复杂的问题，比如“如何造车？”，就会发现列出1234这样的步骤，是不可能的。那是因为，造车太复杂，需要很对协作才能完成。此时面向对象思想就应运而生了。 面向对象面向对象(Object)想想更契合人的思维模式。我们首先思考的是“怎么设计这个事务？” 比如思考造车，我们就会先思考“车怎么设计？”，而不是“怎么按步骤造车的问题”。 总结 都是解决问题的思维方式，都是代码组织的方式。 解决简单问题可以使用面向过程 解决复杂问题：宏观上使用面向对象把握，微观处理上仍然是面向过程。","categories":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"理解","slug":"理解","permalink":"https://5nptdz.coding-pages.com/tags/%E7%90%86%E8%A7%A3/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"Java垃圾回收机制","slug":"Garbage-Collection","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-16T05:02:21.651Z","comments":true,"path":"2020/01/01/Garbage-Collection/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/Garbage-Collection/","excerpt":"","text":"通用的分代垃圾回收机制​ 分代垃圾回收机制，是基于这样一个事实：不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的回收算法，以便提高回收效率。我们将对象分为三种状态：年轻代、年老代、持久代。JVM将堆内存划分为Eden、Survivor和Tenured/Old空间。 年轻代 所有新生成的对象首先都是放在Eden区。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象，对应的是Minor GC，每次Minor GC 会清理年轻代的内存，算法采用效率较高的复制算法，频繁的操作，但是会浪费内存空间。当“年轻代”区域存放满对象后，就将对象存放到年老代区域。 年老代 在年轻代中经历了N(默认15)次垃圾回收后仍然存活的对象，就会被放到年老代中。因此可以认为年老代中存放的都是一些生命周期较长的对象。年老代对象越来越多，我们就需要启动Major GC和Full GC(全量回收)，来一次大扫除，全面清理年轻代区域和年老代区域。 持久代 用于存放静态文件，如Java类、方法等。持久代堆垃圾回收没有显著影响。 Minor GC： 用于清理年轻代区域。Eden区满了就会触发一次Minor GC。清理无用对象，将有用对象复制到“Survivor1”、“Survivor2”区中(这两个区，大小空间也相同，同一时刻Surivor1和Surivor2只有一个在用，一个为空) Major GC： 用于清理年老代区域。 Full GC: 用于清理年轻代、年老代区域。成本较高，会对系统产生影响。 垃圾回收过程： 新创建的对象，绝大多数都会存储在Eden中 当Eden满了(达到一定比例)不能创建新对象，则触发垃圾回收(GC )，将无用对象清理掉，然后剩余对象赋值到某个Survivor中，如S1，同时清空Eden区 当Eden区再次满了，会将S1中的不能清空的对象存到另外一个Surivor中，如S2，同时将Eden区中的不能清空的对象，也复制到S2中，保证Eden和S1，均被清空。 重复多次(默认15次)Survivor中没有被清理的对象，则会复制到老年代Old(Tenured)区中 当Old区满了，则会出发一个完整地垃圾回收(FullGC)，之前新生代的垃圾回收称为(minorGC) JVM调优和Full GC在对JVM调优的过程中，很大一部分工作就是对于Full GC的调节。有如下原因可能导致Full GC： 年老代(Tenureed)被写满 持久代(Perm)被写满 System.gc()被显式调用(程序建议GC启动，不是调用GC) 上一次GC之后Heap的各域分配策略动态变化","categories":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"理解","slug":"理解","permalink":"https://5nptdz.coding-pages.com/tags/%E7%90%86%E8%A7%A3/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"Java虚拟机内存分析理解","slug":"memory-analyze","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-09T11:43:15.313Z","comments":true,"path":"2020/01/01/memory-analyze/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/memory-analyze/","excerpt":"","text":"概述Java虚拟机的内存可以分为三个区域：栈stack、堆heap、方法区method area 栈的特点如下： 栈描述的是方法执行的内存模型，每个方法被调用都会创建一个栈帧(存储局部变量、操作数、方法出口等) JVM为每个线程创建一个栈，用于存放该线程执行方法的信息(实际参数、局部变量等) 栈属于线程私有，不能实现线程间的共享！ 栈的内存特性是“先进后出，后进先出” 栈是由系统自动分配，速度快！栈是一个连续的内存空间！ 堆的特点如下： 堆用于存储创建好的对象和数组(数组也是对象) JVM只有一个堆，被所有线程共享 堆是一个不连续的内存空间，分配灵活，速度慢！ 方法区(又叫静态区)特点如下： JVM只有一个方法区，被所有线程共享！ 方法区实际也是堆，只是用于存储类、常量相关的信息！ 用来存放程序中永远是不变或唯一的内容。(类信息【Class对象】、静态变量、字符串常量等) 内存分配图","categories":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"理解","slug":"理解","permalink":"https://5nptdz.coding-pages.com/tags/%E7%90%86%E8%A7%A3/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"造成内存泄漏的操作","slug":"memory-leak","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-09T11:08:12.697Z","comments":true,"path":"2020/01/01/memory-leak/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/memory-leak/","excerpt":"","text":"建议： 在实际开发中，经常会造成系统的崩溃。如下这些操作我们应该注意这些使用场景。 创建大量无用对象 比如，我们在需要大量拼接字符串时，使用了String而不是StringBuilder。 String str = &quot;&quot;; for (int i = 0; i&lt;10000; i++){ str += i; //相当于产生了10000个string对象 } 静态类集合的使用 想HashMap、Vector、List等的使用最容易出现内存泄漏，这些静态变量的生命周期和应用程序一致，所有对象Object也不能被释放。 各种连接对象(IO流对象、数据库连接对象、网络连接对象)未关闭 IO流对象、数据库连接对象、网络连接对象等连接对象属于物理连接，和硬盘或者网络连接，不使用时一定要关闭。 监听器的使用 释放对象时，没有删除相应的监听器。 要点： 程序员无权调用垃圾回收器。 程序员可以调用System.gc(),该方法知识通知 JVM，并不是运行垃圾回收器，尽量少用，会申请启动Full GC ，成本高，影响系统性能。 finalize方法，是Java提供给程序员用来释放对象或资源的方法，但是尽量少用。","categories":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"理解","slug":"理解","permalink":"https://5nptdz.coding-pages.com/tags/%E7%90%86%E8%A7%A3/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"手动实现ArrayList","slug":"ArrayList","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-16T07:00:47.047Z","comments":true,"path":"2020/01/01/ArrayList/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/ArrayList/","excerpt":"","text":"ArrayList底层用数组实现的存储。特点：查询效率高，增删效率低，线程不安全。我们一般使用它。package simple; import java.util.Arrays; public class ArrayListTest&lt;T&gt; { private Object[] elementData; private int size; private static final int DEFAULT_CAPACITY = 10; public ArrayListTest() { elementData = new Object[DEFAULT_CAPACITY]; } public ArrayListTest(int capacity) { if(capacity&lt;0){ throw new RuntimeException(&quot;容量不能为负数&quot;); }else if(capacity==0){ elementData = new Object[DEFAULT_CAPACITY]; }else { elementData = new Object[capacity]; } } public void add (T obj){ if(size == elementData.length){ Object[] newArray = new Object[elementData.length+(elementData.length&gt;&gt;1)]; System.arraycopy(elementData,0,newArray,0,elementData.length); elementData = newArray; } elementData[size++] = obj; } public T get(int index) { checkRange(index); return (T) elementData[index]; } public void set(int index,T obj) { checkRange(index); elementData[index] = obj; } public void checkRange(int index){ if(index&lt;0||index&gt;size-1){ throw new RuntimeException(&quot;索引不合法&quot;+index); } } public void remove(T element){ for(int i=0;i&lt;size;i++){ if(element.equals(get(i))){ remove(i); } } } public void remove(int index) { int numMoved = elementData.length-index-1; if(numMoved&gt;0){ System.arraycopy(elementData,index+1,elementData,index,numMoved); } elementData[--size] = null; } public int size(){ return size; } public boolean isEmpty(){ return size==0?true:false; } @Override public String toString() { StringBuilder sb = new StringBuilder(); sb.append(&quot;[&quot;); for(int i=0;i&lt;size;i++){ sb.append(elementData[i]+&quot;,&quot;); } sb.setCharAt(sb.length()-1,&#39;]&#39;); return sb.toString(); } public static void main(String[] args) { ArrayListTest s1= new ArrayListTest(20); for(int i=0;i&lt;10;i++){ s1.add(&quot;lin&quot;+i); } System.out.println(s1.get(9)); s1.remove(5); System.out.println(s1); s1.remove(&quot;lin3&quot;); System.out.println(s1); } } 原理总结： 底层数组扩容旧数组拷贝到新数组 System.arraycopy(elementData,0,newArray,0,elementData.length); remove方法先调用equals方法查找到相同元素，找到删除元素的数组下标用数组拷贝方法拆分重新整合新的数组并返回。","categories":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"ArrayList","slug":"ArrayList","permalink":"https://5nptdz.coding-pages.com/tags/ArrayList/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"手动实现LinkedList","slug":"LinkedList","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-16T12:33:08.799Z","comments":true,"path":"2020/01/01/LinkedList/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/LinkedList/","excerpt":"","text":"LinkedList底层用双向链表实现的存储。特点：查询效率低，增删效率高，线程不安全。 双向链表也叫双链表，是链表的一种，它的每个数据节点中都有两个指针，分别指向前一个节点和后一个节点。所以，从双向链表中的任意一个节点开始，都可以很方便地找到所有节点。 package simple; public class LinkedListTest&lt;T&gt; { class Node { Node previous; Node next; T element; public Node(Node previous, Node next, T element) { this.previous = previous; this.next = next; this.element = element; } public Node(T element) { this.element = element; } } private Node first; private Node last; private int size; public void add(T obj){ Node node = new Node(obj); if(first==null){ first = node; last = node; }else { node.previous = last; node.next = null; last.next = node; last = node; } size++; } public void add(int index,T obj){ Node newNode = new Node(obj); Node temp = getNode(index); if(temp!=null){ Node up = temp.previous; newNode.previous = up; up.next = newNode; newNode.next = temp; temp.previous = newNode; } size++; } public T get(int index) { checkRange(index); Node temp = getNode(index); return temp!=null?temp.element:null; } public Node getNode(int index){ Node temp = null; if(index&lt;=(index&gt;&gt;1)){ temp = first; for(int i=0;i&lt;index;i++){ temp = temp.next; } }else { temp = last; for(int i=size-1;i&gt;index;i--){ temp = temp.previous; } } return temp; } public void remove(int index){ Node temp = getNode(index); if(temp!=null){ Node up = temp.previous; Node down = temp.next; if(up!=null){ up.next = down; }else { first = down; } if(down!=null){ down.previous = up; }else { last = up; } } size--; } private void checkRange(int index){ if(index&lt;0||index&gt;size-1){ throw new RuntimeException(&quot;索引不合法&quot;+index); } } public String toString() { StringBuilder sb = new StringBuilder(); sb.append(&quot;[&quot;); Node temp = first; while(temp!=null){ sb.append(temp.element).append(&quot;,&quot;); temp = temp.next; } sb.setCharAt(sb.length()-1,&#39;]&#39;); return sb.toString(); } public static void main(String[] args) { LinkedListTest linkedListTest= new LinkedListTest&lt;Object&gt;(); for(int i=0;i&lt;10;i++){ linkedListTest.add(&quot;aa&quot;+i); } //linkedListTest.remove(9); linkedListTest.add(7,&quot;hello&quot;); System.out.println( linkedListTest.toString()); } } 总结： 做增删操作时注意把相邻两个节点衔接上。","categories":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"LinkList","slug":"LinkList","permalink":"https://5nptdz.coding-pages.com/tags/LinkList/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"手工实现HashMap","slug":"HashMap","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-17T13:40:46.105Z","comments":true,"path":"2020/01/01/HashMap/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/HashMap/","excerpt":"","text":"HashMap底层实现采用了哈希表，这是一种非常重要的数据结构。 数据结构中由数组和链表来实现堆数据的存储，他们各有特点。 数组：暂用空间连续。寻找地址容易，查询速度快。但是，增加和删除效率非常低。 链表：占用空间不连续，寻找地址困难，查询速度慢。但是，增加和删除效率非常高。 存储数据过程 package simple; import java.util.Arrays; import java.util.HashMap; public class HashMapTest&lt;K,V&gt; { class Node&lt;K,V&gt; { int hash; K key; V value; Node next; } Node[] table; int size; public HashMapTest() { table = new Node[16]; //长度一般定义为2的整数幂 } public void put(K key,V value){ //定义新的节点对象 Node newNode = new Node(); newNode.hash = key.hashCode()&amp;table.length; newNode.key = key; newNode.value = value; Node temp = table[newNode.hash]; if(temp==null){ table[newNode.hash] = newNode; size++; }else { while (temp!=null){ if(temp.key.equals(key)){ temp.value = value; //覆盖重复值 break; } if (temp.next!=null){ temp = temp.next; }else { temp.next = newNode;//没找到相同key 添加到链表最后 size++; break; } } } } public V get(K key){ for(int i=0;i&lt;size;i++){ Node temp = table[i]; while(temp!=null){ if(key.equals(temp.key)){ return (V)temp.value; } temp = temp.next; } } return null; } @Override public String toString() { StringBuilder sb = new StringBuilder(); sb.append(&quot;{&quot;); for(int i=0;i&lt;size;i++){ Node temp = table[i]; while(temp!=null){ sb.append(temp.key).append(&quot;=&quot;).append(temp.value).append(&quot;,&quot;); temp = temp.next; } } sb.setCharAt(sb.length()-1,&#39;}&#39;); return sb.toString(); } public static void main(String[] args) { HashMapTest&lt;Integer,String&gt; hashMapTest = new HashMapTest(); for(int i=0;i&lt;10;i++){ hashMapTest.put(i,&quot;lin&quot;+i); } System.out.println(hashMapTest.get(0)); System.out.println(hashMapTest.toString()); System.out.println(hashMapTest.size); } }","categories":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HashMap","slug":"HashMap","permalink":"https://5nptdz.coding-pages.com/tags/HashMap/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"吸引面试官要点","slug":"enjoy","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-18T14:14:57.682Z","comments":true,"path":"2020/01/01/enjoy/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/enjoy/","excerpt":"","text":"面试官喜欢什么样的人？ 秉性良好、谈吐正常的人 精心准备自我介绍（突出实践经验、而不是爱好！） 交谈大方，无小动作（别太紧张） 衣着干净整洁 懂得感恩。不说公司、老师、老板、同事的坏话 工作态度端正、认真工作的人 是否一切以公司事务为重 加班问题 大大方方谈薪水（接受薪水不是越低越好，适当的区间） 热爱本职工作、有合理职业规划 一定要明确自己的职业规划！与企业发展理念相一致，切勿说自己只是来过度！ 工作会不会给你带来快乐 至少规划3年的职业规划，注意合理（不放大，也不缩小） 热爱学习、喜欢提升自己的人 自己平时如何学习？有哪些学习习惯或者学习技巧？请推荐一本你最近阅读的专业书籍。 参加和本职工作，相关的培训（利用业余时间，周末和晚上） 最近对XXX新技术感兴趣，正在研究 技术牛，完全可以胜任工作 最后一点，用心对待，面试官也能感受到","categories":[{"name":"面试","slug":"面试","permalink":"https://5nptdz.coding-pages.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://5nptdz.coding-pages.com/tags/%E9%9D%A2%E8%AF%95/"}],"keywords":[{"name":"面试","slug":"面试","permalink":"https://5nptdz.coding-pages.com/categories/%E9%9D%A2%E8%AF%95/"}]},{"title":"接到面试邀请后需要准备","slug":"interview","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-18T13:54:36.844Z","comments":true,"path":"2020/01/01/interview/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/interview/","excerpt":"","text":"了解公司 公司所在的行业是否有前景？ 公司历史和结构 可以通过天眼查，企查查等。避免进入传销公司，培训公司！ 公司产品和项目有哪些？ 可以通过公司官网查看，公司需要招聘志同道合的人，多了解一些和面试官也有更多的共同话题。 再回过头认真看公司的招聘信息，侧重点要哪些技术经验优先（重点复习），基本要求。确保每一条心里有数。 研究该公司产品，并提出问题 用户群体 PC端功能研究 APP端功能研究 对比同类产品有哪些？ 最后一点，用心去做！","categories":[{"name":"面试","slug":"面试","permalink":"https://5nptdz.coding-pages.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://5nptdz.coding-pages.com/tags/%E9%9D%A2%E8%AF%95/"}],"keywords":[{"name":"面试","slug":"面试","permalink":"https://5nptdz.coding-pages.com/categories/%E9%9D%A2%E8%AF%95/"}]},{"title":"技术面试不该问的4大问题","slug":"notInquire","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-20T10:49:09.882Z","comments":true,"path":"2020/01/01/notInquire/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/notInquire/","excerpt":"","text":"技术面试就问技术相关的问题切勿偏题去问一些不相关的问题，例如： 我能拿多少工资？ 五险一金有没有？交通补助有没有？ 公司经常加班吗？ 您觉得我们今天能面上吗？ 有些问题可以下来问人事 面试即将结束，面试官问：您还有问题吗？这时候一定要去提问，例如：公司某个项目运用了Hadoop我不太熟悉，您能说说吗","categories":[{"name":"面试","slug":"面试","permalink":"https://5nptdz.coding-pages.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://5nptdz.coding-pages.com/tags/%E9%9D%A2%E8%AF%95/"}],"keywords":[{"name":"面试","slug":"面试","permalink":"https://5nptdz.coding-pages.com/categories/%E9%9D%A2%E8%AF%95/"}]},{"title":"职场成功的核武器","slug":"succeed","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-18T15:33:02.315Z","comments":true,"path":"2020/01/01/succeed/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/succeed/","excerpt":"","text":"职场成功的两条腿 硬实力：技术能力 职场的基础 小白重视 难以短时间提高 硬实力更多的是影响工作 软实力：沟通、管理能力 职场晋升的关键 观念认为是天生不可变，大多数忽视训练 短时间可以迅速提高 软实力，影响工作和人生的方方面面 人的软实力有7种能力组成： 基础实力（形象气质、声音魅力） 决定：你的人生基础（婚姻、朋友圈） 人际沟通（沟通力、说服力） 决定：能否晋升到职场中层 领导能力（影响力、领导力、情商） 决定：能否晋升到职场高层 适用范围：有某项特长能力的人不适用此7A+理论 这7种实力是完全可以通过专业训练，迅速提升的！人的能力不是天生的。形象气质力测试 形象气质是人的第一名片。对婚姻、事业有重大影响 早晨起床后，花多长时间打理形象？ A.三十分钟 B.十分钟 C.十分钟一下 多久进一次理发店？ A.一周 B.两周 C.一个月 形象礼仪在社交中的重要性 A.非常重要十分精通 B.很重要但是不懂 C.不重要也不懂 声音魅力测试 好的声音、有磁性的声音，是人的第二名片。 微信发语音时如何评价自己的声音？ A.有磁性有感染力 B.凑合能听 C.不好听 有没有人夸赞过你的声音？ A.经常有 B.偶尔 C.没有 唱歌或者大声讲话时用哪种方式呼吸？ A.熟练运用胸腹式联合呼吸法 B.了解专业发声方法但是不会用 C.完全用嗓子 沟通力测试 好的沟通，让你有好的人际关系；不沟通，没朋友，没伙伴。错误沟通，让你丢失伙伴，丢失爱人。 沟通中，能否正确觉知他人的情绪？ A.敏锐的感觉到 B.后知后觉 C.完全不知道 表达中，给别人留下的印象是？ A.条理清晰，逻辑严谨 B.意识流，想哪儿说哪儿 C.废话连篇，不知所云 如果你不赞同岳母的意见，如何反馈？ A.引导对方察觉自己的问题 B.部分认同，阐述自己的观点 C.直接反对 说服力测试 人的一生每一天都在：说服别人、被别人说服。 你要建立个团队，你能说服多少人？ A.10人 B.5人以下 C.没人 加入新团队，多长时间得到大家认同？ A.天 B.周 C.月 新认识一位女神（男神），多久可以约她（他）吃饭或者看电影？ A.周 B.月 C.年 影响力测试 能对多少人说话，就能有多大成就。 多少人认识你？ A.万 B.千 C.百 曾经在多少人面前表达自己的想法？ A.百人以上 B.十位数 C.个位数 表达自己想法时，气氛互动控场能力？ A.非常好 B.一般 C.较差 领导力测试 能领导多少人，力量就有多大。 你管理过的最大团队多少人？ A.50人以上 B.10-50 C.10以下 团队的执行程度？ A.百分之百执行 B.不完全执行 C.不执行 作为领导，下属多长时间可以领会你的意图？ A.小时 B.天 C.周 情商测试 情商不是见人说人话，见鬼说鬼话。情商是面对压力和逆境时，情绪控制能力。 坚持某个业余爱好的最长时间？ A.年 B.月 C.天 假设项目一周后上线，需要这一周通宵加班，你如何处理？ A.主动加班不惜一切代价一定完成 B.服从领导安排愿意加班 C.正常上下班，能做多少是多少 面临重大挫折，如何处理？ A.乐观积极勇敢面对 B.情绪反复 得过且过 C.消极面对 逃避问题 软实力决定人生高度 软实力可以训练，快速提高 软实力短板，决定你的发展 追求综合，不追求某一项特牛","categories":[{"name":"职场","slug":"职场","permalink":"https://5nptdz.coding-pages.com/categories/%E8%81%8C%E5%9C%BA/"}],"tags":[{"name":"职场","slug":"职场","permalink":"https://5nptdz.coding-pages.com/tags/%E8%81%8C%E5%9C%BA/"}],"keywords":[{"name":"职场","slug":"职场","permalink":"https://5nptdz.coding-pages.com/categories/%E8%81%8C%E5%9C%BA/"}]},{"title":"写好简历的六大要素","slug":"resume","date":"2020-01-01T14:16:01.000Z","updated":"2020-01-18T13:38:46.367Z","comments":true,"path":"2020/01/01/resume/","link":"","permalink":"https://5nptdz.coding-pages.com/2020/01/01/resume/","excerpt":"","text":"简历是求职的名片 简历必须：一字一字自己写，不能抄袭！ 要对自己写的内容负责，写之前先问自己是否真的熟悉掌握，了解自己哪一块知识点比较薄弱。准备简历的过程也是准备面试的过程。 基本情况介绍 姓名、性别、学历、专业、联系方式等 专业技能 有条理的罗列自己的专业技能 求职意向 准确的求职意向 工作经验和项目经验 详细的工作履历、项目经验 曾获奖励 罗列一些工作相关奖励、不相关引以为豪的奖励。 自我评价 突出和工作相关的自我特质和优点 项目经验这里需要重点准备，做过的什么类型的项目描述清楚，开发环境，项目功能，运用到哪些技术，负责哪个模块，曾经遇到哪些问题等。","categories":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"简历","slug":"简历","permalink":"https://5nptdz.coding-pages.com/tags/%E7%AE%80%E5%8E%86/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}]},{"title":"数据库知识要点","slug":"database","date":"2019-01-10T14:16:01.000Z","updated":"2020-01-25T01:35:42.100Z","comments":true,"path":"2019/01/10/database/","link":"","permalink":"https://5nptdz.coding-pages.com/2019/01/10/database/","excerpt":"","text":"一、基本概念 主键、外键、超键、候选键超键：在关系中能唯一标识元组的属性集称为关系模式的超键。一个属性可以为作为一个超键，多个属性组合在一起也可以作为一个超键。超键包含候选键和主键。 候选键：是最小超键，即没有冗余元素的超键。 主键：数据库表中对储存数据对象予以唯一和完整标识的数据列或属性的组合。一个数据列只能有一个主键，且主键的取值不能缺失，即不能为空值（Null）。 外键：在一个表中存在的另一个表的主键称此表的外键。 为什么用自增列作为主键 如果我们定义了主键(PRIMARY KEY)，那么InnoDB会选择主键作为聚集索引、 如果没有显式定义主键，则InnoDB会选择第一个不包含有NULL值的唯一索引作为主键索引、 如果也没有这样的唯一索引，则InnoDB会选择内置6字节长的ROWID作为隐含的聚集索引(ROWID随着行记录的写入而主键递增，这个ROWID不像ORACLE的ROWID那样可引用，是隐含的)。 数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内（大小为一个内存页或磁盘页）的各条数据记录按主键顺序存放，因此每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子（InnoDB默认为15/16），则开辟一个新的页（节点） 如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页 如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置，此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。 触发器的作用？ 触发器是一种特殊的存储过程，主要是通过事件来触发而被执行的。它可以强化约束，来维护数据的完整性和一致性，可以跟踪数据库内的操作从而不允许未经许可的更新和变化。可以联级运算。如，某表上的触发器上包含对另一个表的数据操作，而该操作又会导致该表触发器被触发。 什么是存储过程？用什么来调用？ 存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次SQL，使用存储过程比单纯SQL语句执行要快。 调用： 1）可以用一个命令对象来调用存储过程。 2）可以供外部程序调用，比如：java程序。 5.存储过程的优缺点？ 优点： 1）存储过程是预编译过的，执行效率高。 2）存储过程的代码直接存放于数据库中，通过存储过程名直接调用，减少网络通讯。 3）安全性高，执行存储过程需要有一定权限的用户。 4）存储过程可以重复使用，可减少数据库开发人员的工作量。 缺点： 移植性差","categories":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://5nptdz.coding-pages.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://5nptdz.coding-pages.com/categories/%E6%8A%80%E6%9C%AF/"}]}]}